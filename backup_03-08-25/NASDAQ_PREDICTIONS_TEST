import yfinance as yf
import pandas as pd
import numpy as np
from backtesting import Backtest, Strategy
import matplotlib.pyplot as plt
import seaborn as sns
import unittest
from datetime import datetime, timedelta

# --- 1. Data Acquisition Module ---
def fetch_stock_data(tickers, start_date, end_date):
    """
    Fetch historical stock data from Yahoo Finance for given tickers.
    Returns a DataFrame with daily prices and volumes.
    """
    data = {}
    for ticker in tickers:
        stock = yf.Ticker(ticker)
        df = stock.history(start=start_date, end=end_date)
        df['Ticker'] = ticker
        data[ticker] = df[['Open', 'High', 'Low', 'Close', 'Volume']]
    combined_df = pd.concat(data.values())
    return combined_df

# --- 2. Signal Classification Module ---
def classify_signals(df, price_threshold=0.02, volume_threshold=1.5):
    """
    Classify signals as weak or strong based on price changes and volume spikes.
    Returns a DataFrame with signal classifications.
    """
    df['Price_Change'] = df['Close'].pct_change()
    df['Volume_MA'] = df['Volume'].rolling(window=5).mean()
    df['Volume_Spike'] = df['Volume'] / df['Volume_MA']

    # Weak signals: Small price changes with moderate volume
    df['Signal'] = np.where(
        (abs(df['Price_Change']) < price_threshold) & (df['Volume_Spike'] < volume_threshold),
        'Weak',
        np.where(
            (abs(df['Price_Change']) >= price_threshold) | (df['Volume_Spike'] >= volume_threshold),
            'Strong',
            'Neutral'
        )
    )
    return df

# --- 3. Backtesting Strategies ---
class ContrarianStrategy(Strategy):
    """
    Contrarian strategy: Sell on weak signal overreactions, buy on dips.
    """
    def init(self):
        self.signal = self.data.Signal

    def next(self):
        if self.signal[-1] == 'Weak' and self.data.Close[-1] > self.data.Close[-2]:
            self.sell()
        elif self.signal[-1] == 'Weak' and self.data.Close[-1] < self.data.Close[-2]:
            self.buy()

class MomentumStrategy(Strategy):
    """
    Momentum strategy: Buy on strong signal underreactions, hold until reversal.
    """
    def init(self):
        self.signal = self.data.Signal

    def next(self):
        if self.signal[-1] == 'Strong' and self.data.Close[-1] > self.data.Close[-2]:
            self.buy()
        elif self.position and self.data.Close[-1] < self.data.Close[-2]:
            self.sell()

def run_backtest(df, strategy_class, ticker):
    """
    Run backtest for a given strategy and ticker.
    Returns backtest results.
    """
    bt_data = df[df['Ticker'] == ticker][['Open', 'High', 'Low', 'Close', 'Volume', 'Signal']]
    bt = Backtest(bt_data, strategy_class, cash=10000, commission=.002)
    results = bt.run()
    return results

# --- 4. Visualization Module ---
def plot_results(df, ticker, bt_results, strategy_name):
    """
    Plot historical prices, signals, and backtest performance.
    """
    plt.figure(figsize=(14, 7))
    
    # Subplot 1: Stock prices and signals
    ax1 = plt.subplot(2, 1, 1)
    stock_data = df[df['Ticker'] == ticker]
    ax1.plot(stock_data.index, stock_data['Close'], label='Close Price')
    weak_signals = stock_data[stock_data['Signal'] == 'Weak']
    strong_signals = stock_data[stock_data['Signal'] == 'Strong']
    ax1.scatter(weak_signals.index, weak_signals['Close'], color='orange', label='Weak Signal')
    ax1.scatter(strong_signals.index, strong_signals['Close'], color='red', label='Strong Signal')
    ax1.set_title(f'{ticker} - Price and Signals')
    ax1.legend()

    # Subplot 2: Equity curve from backtest
    ax2 = plt.subplot(2, 1, 2)
    ax2.plot(bt_results['_equity_curve']['Equity'], label=f'{strategy_name} Equity')
    ax2.set_title(f'{strategy_name} Performance')
    ax2.legend()

    plt.tight_layout()
    plt.show()

# --- 5. Unit Tests ---
class TestStockAnalysis(unittest.TestCase):
    def setUp(self):
        self.tickers = ['NVDA']  # Test with one ticker
        self.start_date = '2024-02-24'
        self.end_date = '2025-02-24'
        self.df = fetch_stock_data(self.tickers, self.start_date, self.end_date)

    def test_data_fetch(self):
        self.assertFalse(self.df.empty)
        self.assertIn('Close', self.df.columns)

    def test_signal_classification(self):
        classified_df = classify_signals(self.df.copy())
        self.assertIn('Signal', classified_df.columns)
        self.assertTrue(classified_df['Signal'].isin(['Weak', 'Strong', 'Neutral']).all())

# --- Main Execution ---
if __name__ == "__main__":
    # Define parameters
    tickers = [
        'NVDA',  # High volatility (tech, AI)
        'TSLA',  # High volatility (automotive, innovation)
        'JPM',   # Medium volatility (financial)
        'KO',    # Low volatility (consumer goods)
        'PG'     # Low volatility (consumer goods)
    ]
    start_date = (datetime.now() - timedelta(days=365)).strftime('%Y-%m-%d')
    end_date = datetime.now().strftime('%Y-%m-%d')

    # Fetch and process data
    stock_data = fetch_stock_data(tickers, start_date, end_date)
    classified_data = classify_signals(stock_data.copy())

    # Run backtests and visualize for one stock (e.g., NVDA)
    ticker_to_test = 'NVDA'
    contrarian_results = run_backtest(classified_data, ContrarianStrategy, ticker_to_test)
    momentum_results = run_backtest(classified_data, MomentumStrategy, ticker_to_test)

    print("Contrarian Strategy Results:")
    print(contrarian_results)
    print("\nMomentum Strategy Results:")
    print(momentum_results)

    plot_results(classified_data, ticker_to_test, contrarian_results, "Contrarian")
    plot_results(classified_data, ticker_to_test, momentum_results, "Momentum")

    # Run unit tests
    unittest.main(argv=['first-arg-is-ignored'], exit=False)